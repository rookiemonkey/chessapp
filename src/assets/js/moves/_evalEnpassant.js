import ChessApp from '../main';
import move_pawn from './pawn';

export default function evalEnpassant(props) {
    const { state, rowFrom, colFrom, coorTo, from } = props;
    const { validEnpassants } = move_pawn({ ...state, rowFrom, colFrom })
    let target;


    // refers to the target chess piece
    const rightEnpassantTarget = `${rowFrom}_${parseInt(colFrom) + 1}`;
    const leftEnpassantTarget = `${rowFrom}_${parseInt(colFrom) - 1}`;


    // refers to the target empty cell above/below the target chess piece
    const toRightWHIenpassantCell = `${parseInt(rowFrom) + 1}_${parseInt(colFrom) + 1}`;
    const toLeftWHIenpassantCell = `${parseInt(rowFrom) + 1}_${parseInt(colFrom) - 1}`;
    const toRightBLKenpassantCell = `${parseInt(rowFrom) - 1}_${parseInt(colFrom) + 1}`;
    const toLeftBLKenpassantCell = `${parseInt(rowFrom) - 1}_${parseInt(colFrom) - 1}`;


    // check if the target chess piece coor is a valid enpassant move generated by move_pawn
    const isValidLeftenpassant = validEnpassants
        .some(enpCoor => enpCoor == leftEnpassantTarget)

    const isValidRightenpassant = validEnpassants
        .some(enpCoor => enpCoor == rightEnpassantTarget)


    // check if the destination of the player is to capture the target piece
    if (isValidLeftenpassant
        && (toLeftWHIenpassantCell == coorTo || toLeftBLKenpassantCell == coorTo))
        target = document.querySelector(`[data-coor='${leftEnpassantTarget}']`);


    if (isValidRightenpassant
        && (toRightWHIenpassantCell == coorTo || toRightBLKenpassantCell == coorTo))
        target = document.querySelector(`[data-coor='${rightEnpassantTarget}']`);


    // capture the target
    if (target) {
        const [row, col] = target.getAttribute('data-coor').split('_');
        const otherPlayer = target.getAttribute('player');
        const hisChessPiece = target.getAttribute('piece');
        state[otherPlayer].pieces[hisChessPiece] -= 1;
        state[state.CURRENT_PLAYER].attacked[hisChessPiece] += 1;
        ChessApp.cellOnCaputure(target.getAttribute('player'));
        target.classList.remove(from.getAttribute('player'));
        target.removeAttribute('player');
        target.removeAttribute('piece');
        target.removeAttribute('id');
        target.innerHTML = ``;
        state.BOARD[`ROW${row}`][col - 1] = null;
    }
}